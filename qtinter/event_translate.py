import sys

# TODO: Change for viable text
# https://github.com/python/cpython/blob/3.8/Lib/tkinter/__init__.py#L1354
# """Bind to this widget at event SEQUENCE a call to function FUNC.
#        SEQUENCE is a string of concatenated event
#        patterns. An event pattern is of the form
#        <MODIFIER-MODIFIER-TYPE-DETAIL> where:
#        MODIFIER is one
#        of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
#        Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
#        B3, Alt, Button4, B4, Double, Button5, B5 Triple,
#        Mod1, M1.
#        TYPE is one of Activate, Enter, Map,
#        ButtonPress, Button, Expose, Motion, ButtonRelease
#        FocusIn, MouseWheel, Circulate, FocusOut, Property,
#        Colormap, Gravity Reparent, Configure, KeyPress, Key,
#        Unmap, Deactivate, KeyRelease Visibility, Destroy,
#        Leave and
#        DETAIL is the button number for ButtonPress,
#        ButtonRelease and DETAIL is the Keysym for KeyPress and
#        KeyRelease. Examples are
#        <Control-Button-1> for pressing Control and mouse button 1 or
#        <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
#        An event pattern can also be a virtual event of the form
#        <<AString>> where AString can be arbitrary. This
#        event can be generated by event_generate.
#        If events are concatenated they must appear shortly
#        after each other.
#        FUNC will be called if the event sequence occurs with an
#        instance of Event as argument. If the return value of FUNC is
#        "break" no further bound function is invoked.
#        An additional boolean parameter ADD specifies whether FUNC will
#        be called additionally to the other bound function or whether
#        it will replace the previous function.
#        Bind will return an identifier to allow deletion of the
#        bound function with
#        unbind without memory leak.
#        If FUNC or SEQUENCE is omitted the bound function or list
#        of bound events are returned."""
#
# Also:
#  You can use shorter forms of the events. Here are some examples:
#     '<1>' is the same as '<Button-1>'.
#     'x' is the same as '<KeyPress-x>'.
#     <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
#
# The other half:
# Key: https://doc.bccnsoft.com/docs/PyQt4/qt.html#Key-enum
# Modifier: https://doc.bccnsoft.com/docs/PyQt4/qt.html#KeyboardModifier-enum
# MouseButton: https://doc.bccnsoft.com/docs/PyQt4/qt.html#MouseButton-enum
# TkEvent: http://epydoc.sourceforge.net/stdlib/Tkinter.Event-class.html
#
#
# Things i need to translate:
# -----------------------
#         if type(self.qt_event) in [QMouseEvent, QKeyEvent, QEnterEvent]:
#             # TODO: This need translation !!!
#             self.tk_event.state = self.qt_event.type()
#             + self.qt_event.modifiers()
# -----------------------
#         if type(self.qt_event) == QKeyEvent:
#             # TODO: This need translation !!!
#             self.tk_event.keysym = self.qt_event.text()
#             self.tk_event.keysym_num = ord(self.qt_event.text())
# -----------------------
#         if type(self.qt_event) == QKeyEvent:
#             # TODO: This need translation !!!
#             self.tk_event.char = self.qt_event.text()
# -----------------------
#        # TODO: This need translation !!!
#        self.tk_event.type = self.qt_event.type()
# TODO: Feature improvement:
# Resolving method for missing parameters
# Making "settings"
from PyQt5.QtCore import Qt


def key_translator(qt_key):
    """Translates QtKey to TkKey."""

    # Sources:
    # Tk: http://www.tcl.tk/man/tcl8.4/TkCmd/keysyms.htm
    # Qt: https://doc.bccnsoft.com/docs/PyQt4/qt.html#Key-enum

    # According to sources, key values should be the same/similar
    value = int(qt_key)
    return value


# TODO: Mouse translator - right = 3 for Tkinter, 2 for PyQt5


# Possibilities:
# <MODIFIER-MODIFIER-TYPE-DETAIL>
# <MODIFIER-TYPE-DETAIL>
# <TYPE-DETAIL>
# <DETAIL> -> Either number or Character so this translates to:
#   '<1>' is the same as '<Button-1>'.
#   'x' is the same as '<KeyPress-x>'.
def sequence_parser(sequence):
    # TODO: Docs
    sequence = sequence.replace('<', '')
    sequence = sequence.replace('>', '')
    # Split sequence and revert list so we go from right to left.
    sequence_split = sequence.split('-')
    sequence_split.reverse()

    # Setup return dict
    parsed = {
        "Detail": None,
        "Type": None,
        "Mod2": None,
        "Mod1": None,
    }

    # Iterate thru keys and sequence
    iteration_counter = 0
    for key in parsed:
        if iteration_counter < len(sequence_split):
            parsed[key] = sequence_split[iteration_counter]
            iteration_counter += 1
        else:
            break

    if len(sequence_split) == 1:
        if sequence_split[0].isnumeric():
            parsed["Type"] = "Button"
        else:
            parsed["Type"] = "KeyPress"

    return parsed


def tk_modifier_to_qt(tk_modifier):
    """Takes tk_modifier and translates it to Qt Modifier."""

    qt_modifiers = {
        "Alt": Qt.AltModifier,
        "Any": None,
        "Control": Qt.ControlModifier,
        "Double": None,
        "Lock": None,
        "Shift": Qt.ShiftModifier,
        "Triple": None,
    }

    # Not implemented Qt modifiers:
    # Qt.NoModifier, Qt.MetaModifier, Qt.KeypadModifier, Qt.GroupSwitchModifier

    if tk_modifier not in qt_modifiers:
        print("Warning, tk modifier", tk_modifier,
              "not found in translate dict",
              file=sys.stderr)

    if qt_modifiers[tk_modifier] is None:
        print("Warning, event method for", type, "not set.",
              file=sys.stderr)
    else:
        return qt_modifiers[tk_modifier]


def get_method_for_type(event_type):
    """Resolves event_type from Tkinter name to PyQt widget method."""

    event_type_switch = {
        "Activate": None,
        "Button": "mousePressEvent",
        "ButtonRelease": "mouseReleaseEvent",
        "Configure": None,
        "Deactivate": None,
        "Destroy": None,
        "Enter": "enterEvent",
        "Expose": None,
        "FocusIn": "focusInEvent",
        "FocusOut": "focusOutEvent",
        "KeyPress": "keyPressEvent",
        "KeyRelease": "keyReleaseEvent",
        "Leave": "leaveEvent",
        "Map": None,
        "Motion": "mouseMoveEvent",
        "MouseWheel": "wheelEvent",
        "Unmap": None,
        "Visibility": None,
    }

    # Source: https://doc.qt.io/qt-5/qwidget.html
    # Not implemented / connected
    # actionEvent(QActionEvent *event)
    # changeEvent(QEvent *event)
    # closeEvent(QCloseEvent *event)
    # contextMenuEvent(QContextMenuEvent *event)
    # dragEnterEvent(QDragEnterEvent *event)
    # dragLeaveEvent(QDragLeaveEvent *event)
    # dragMoveEvent(QDragMoveEvent *event)
    # dropEvent(QDropEvent *event)
    # hideEvent(QHideEvent *event)
    # inputMethodEvent(QInputMethodEvent *event)
    # mouseDoubleClickEvent(QMouseEvent *event)
    # moveEvent(QMoveEvent *event)
    # paintEvent(QPaintEvent *event)
    # resizeEvent(QResizeEvent *event)
    # showEvent(QShowEvent *event)
    # tabletEvent(QTabletEvent *event)

    if event_type not in event_type_switch:
        print("Warning, event type", event_type, "not found in sequence",
              file=sys.stderr)

    if event_type_switch[event_type] is None:
        print("Warning, event method for", event_type, "not set.",
              file=sys.stderr)
    else:
        return event_type_switch[event_type]
